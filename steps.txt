https://reactjs.org/docs/create-a-new-react-app.html:
npx create-react-app feedback-app --use-npm
cd feedback-app
git init
*create repo on github*
git remote add origin https://github.com/levi-blodgett/feedback-app.git
git add .; git commit -m "init repo"; git push -u origin master;
Update readme.md
Delete feedback-app/src directory so we can recreate it from scratch
Create new src directory
Add index.js file
     Will be the main file used for putting together components for the SPA (single page application)
     Since React is made of components, we need to make each component and then use render to insert it into the DOM directly, creating a much more organized app structure
Create first component, app.js
    Components can be either classes or functions, classes is the older method for components, with more modern react components you will see hooks to use state and lifecycle
    We want to return jsx, JavaScript XML, syntax extension that allows us to have syntactic sugar to put HTML directly into our JavaScript
    Can only return one element at a time, but you can have nested elements inside of a div, for instance
        Instead of a div, you can have an empty fragment like '<>' that will make the html elements that are nested be directly inside of the root div
Create a dev dir with an App.js for testing features & learning
    Experimented with conditionals, dynamic values, and lists in JSX
Create new components dir in src
Generate boilerplate header component with ES7 snippets extension
Customize header component
Take css from: /bradtraversy/feedback-app/main/src/index.css
Added styling directly in Header.jsx
Create FeedbackItem.jsx & practice state within inside /src/dev
    done via "usestate" hook
        state in react is immutable meaning it can't be directly changed, it has to be changed via calling a function that does so.
Create FeedbackList.jsx & FeedbackData.js and edit FeedbackItem.jsx & App.js so we can use global state
    More layers added in, need to have FeedbackList changed to a function that can be iterated over and pass the data in through it
Create Card.jsx in /dev to practice conditional styling
Create Card.jsx in /components/shared to simplify creating card divs
    Holds a conditional className with 'reverse'
        The component needs 'reverse={true}' after the component to enable
Added back prop-types throughout the components to double-check types of vars
Install fontawesome + other icon libraries
    npm i react-icons
    npm start
    import into FeedbackItem.jsx
Add delete feedback functionality to app
    Have to pass handleDelete all the way up the chain to App.js, then use filter() on the array to take it out via it's id
    Called prop drilling, won't have to do this when we implement context API because then we can bring in state to any component we want
Add FeedbackStats.jsx to project and calculate the average rating and reviews
Add FeedbackForm.jsx so we can create a form to submit
    Created form, not button, attached text to a state in component